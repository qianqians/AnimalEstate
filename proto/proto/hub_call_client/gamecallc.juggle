import common

struct effect_info 
{
	int16[] grids;
	effect effect_id;

	// 泥泞路面持续时间
	int32 continued_rounds;
}

enum enum_add_props_type
{
	pick_up = 1;		//场景随机生成 拾取
	gacha_add = 2;		//扭蛋获得
}

module game_client{
	
	game_wait_start_info multicast(int32 countdown, playground _playground, player_game_info[] info);
	
	game_info multicast(playground _playground, player_game_info[] info, int64 round_player_guid);
	
	ntf_effect_info multicast(effect_info[] info);
	
	ntf_new_effect_info multicast(effect_info info);
	
	turn_player_round multicast(int64 guid);

	start_throw_dice multicast(int64 guid, int16 animal_index);
	
	throw_dice multicast(int64 guid, int32[] dice);
	
	choose_dice req() rsp(int16 dice_index) err();
	
	rabbit_choose_dice multicast(int32 dice);
	
	move multicast(int64 guid, int16 animal_index, int32 from, int32 to);
	
	relay multicast(int64 guid, int16 new_animal_index);
	
	use_skill multicast(int64 guid, int64 target_guid, int16 target_animal_index);
	
	reset_position multicast(player_game_info[] info);
	
	effect_move multicast(effect effect_id, int64 guid, int16 target_animal_index, int32 from, int32 to);
	
	use_props multicast(int64 guid, props props_id, int64 target_guid, int16 target_animal_index);
	
	add_props multicast(enum_add_props_type add_type, int64 guid, props props_id);
	
	reverse_props multicast(int64 src_guid, int64 target_guid, props props_id, int64 reverse_target_guid, int16 reverse_target_animal_index);
	
	immunity_props multicast(int64 guid, props props_id, int64 target_guid, int16 target_animal_index);
	
	can_not_active_this_round multicast(int64 guid);
}